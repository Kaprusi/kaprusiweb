1
00:00:00,000 --> 00:00:04,990
In the last movie we created a GitHub account and created an initial GitHub repository,

2
00:00:05,000 --> 00:00:08,990
and that's on the remote server that we can then connect to.

3
00:00:09,000 --> 00:00:13,990
We now need to tell our local repository information about where it can find the remote.

4
00:00:14,000 --> 00:00:18,990
When we set up the remote repository, GitHub came up and offered us some helpful information.

5
00:00:19,000 --> 00:00:21,990
Go ahead and leave that page up, because we're going to want to come back to that.

6
00:00:22,000 --> 00:00:25,990
But first I want to switch over to your command line and make sure that you're inside the

7
00:00:26,000 --> 00:00:26,990
root of your project already.

8
00:00:27,000 --> 00:00:33,990
If not, you'll want to navigate into it, and from there let's type our first command which is git remote.

9
00:00:34,000 --> 00:00:37,990
So git remote will come up and give us a list of all the remotes that it knows about.

10
00:00:38,000 --> 00:00:38,990
It doesn't know about any right now about.

11
00:00:39,000 --> 00:00:40,990
So it doesn't return anything.

12
00:00:41,000 --> 00:00:42,990
The git remote works a lot like git branch does.

13
00:00:43,000 --> 00:00:48,990
We use git branch to see all the branches, git remote shows us all the remotes that we know about.

14
00:00:49,000 --> 00:00:52,990
Now the next command we want to do is git remote add.

15
00:00:53,000 --> 00:00:56,990
So git remote add will add a remote and then what we want to put in.

16
00:00:57,000 --> 00:00:58,990
Don't type this part.

17
00:00:59,000 --> 00:01:00,990
Just wait for second.

18
00:01:01,000 --> 00:01:04,990
Git remote add and then the alias for what we want to name our remote followed by the

19
00:01:05,000 --> 00:01:06,990
URL of where it can find it.

20
00:01:07,000 --> 00:01:11,990
Let's go back and look at that and GitHub page again, because it tells you the name,

21
00:01:12,000 --> 00:01:13,990
the URL, where you can find it.

22
00:01:14,000 --> 00:01:14,990
That's what this is right here.

23
00:01:15,000 --> 00:01:20,990
So you can just copy and paste that, and it suggests the default name of origin.

24
00:01:21,000 --> 00:01:21,990
Now this is an alias.

25
00:01:22,000 --> 00:01:23,990
You can call it whatever you want.

26
00:01:24,000 --> 00:01:27,990
Let's say origin and then that whole long string pasted in.

27
00:01:28,000 --> 00:01:33,990
This will create a new remote called origin that points to that remote server at that URL.

28
00:01:34,000 --> 00:01:34,990
Now we don't have to call it origin.

29
00:01:35,000 --> 00:01:39,990
By convention, typically, you call your primary one origin, that's what most people do.

30
00:01:40,000 --> 00:01:41,990
But if you want you can call it GitHub let's say.

31
00:01:42,000 --> 00:01:46,990
I'm going to go head and call mine origin just so we can stick with that default convention.

32
00:01:47,000 --> 00:01:50,990
Now I do want to make sure that I call attention to the fact that I'm using a URL which has

33
00:01:51,000 --> 00:01:52,990
my name in it, because that's for my GitHub account.

34
00:01:53,000 --> 00:01:56,990
Of course, for you, you will want to make sure that you are using the one that has your

35
00:01:57,000 --> 00:02:02,990
GitHub account, and from now on if you're using the exercise files where we have a remote

36
00:02:03,000 --> 00:02:06,990
defined, you will want to make sure that you take a second to change that remote to point

37
00:02:07,000 --> 00:02:09,990
to your GitHub account, not to mine.

38
00:02:10,000 --> 00:02:10,990
So that's very important.

39
00:02:11,000 --> 00:02:15,990
You want to make sure that you customize it so that it's looking at your remote repository,

40
00:02:16,000 --> 00:02:17,990
and not trying to find the one that I created.

41
00:02:18,000 --> 00:02:21,990
Now it's worth noting that you can have more than one remote for your project.

42
00:02:22,000 --> 00:02:25,990
We don't have to just have this one remote server out there that we are connecting to.

43
00:02:26,000 --> 00:02:28,990
You can have several different ones and in that case you would definitely want to give

44
00:02:29,000 --> 00:02:30,990
them each a different name.

45
00:02:31,000 --> 00:02:33,990
So now lets try out git remote command again.

46
00:02:34,000 --> 00:02:35,990
Git remote, and this says ah, here is origin.

47
00:02:36,000 --> 00:02:41,990
Let's do git remote with the -v option after it, that will give us a little more information.

48
00:02:42,000 --> 00:02:45,990
Now it shows us the URL that it's going to use for fetching and the one that it's going

49
00:02:46,000 --> 00:02:46,990
to use for pushing.

50
00:02:47,000 --> 00:02:49,990
Now typically those are going to be the same ones, but they don't have to be.

51
00:02:50,000 --> 00:02:50,990
It could be different ones.

52
00:02:51,000 --> 00:02:55,990
We could have a read-only remote that we're fetching from, but we're pushing to one that lets us write.

53
00:02:56,000 --> 00:02:59,990
And if you're wondering how Git now knows about these remotes, it stores those in the

54
00:03:00,000 --> 00:03:02,990
.git folder of course, in config.

55
00:03:03,000 --> 00:03:06,990
Let's take a look that file, and you can see that now it says, okay, I have a remote called

56
00:03:07,000 --> 00:03:11,990
origin and here's the URL for it, and these are instructions that Git will use to tell

57
00:03:12,000 --> 00:03:16,990
it what information it's going to pull down from the remote repository when it does a fetch.

58
00:03:17,000 --> 00:03:20,990
The last thing I want to show you is just that if you want to remove a remote is just

59
00:03:21,000 --> 00:03:24,990
simply git remote rm followed by the alias.

60
00:03:25,000 --> 00:03:28,990
So that would remove the origin remote that we just created.

61
00:03:29,000 --> 00:03:28,990
So I've removed that.

62
00:03:29,000 --> 00:03:33,990
If we now take a look, you will see it's not in our config file, and of course, I can add

63
00:03:34,000 --> 00:03:39,990
it again just like that, and now git remote shows me it in the list again.

64
00:03:40,000 --> 00:03:44,990
So now our local repository knows about the GitHub repository that we've created.

65
00:03:45,000 --> 00:03:45,990
We haven't shared any data yet.

66
00:03:46,000 --> 00:03:49,990
None of our branches or commits or anything like that are on the remote repository yet.

67
00:03:50,000 --> 00:03:53,990
At this point, we've just simply created the mechanism by which they can establish a connection

68
00:03:54,000 --> 00:03:57,990
so that we can begin pushing our code up to the remote repository, and that's what we

69
00:03:58,000 --> 00:03:59,990
will start doing in the next movie.

70
00:04:00,000 --> 00:04:10,000


