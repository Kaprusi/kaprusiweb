1
00:00:00,000 --> 00:00:05,990
We've been taking a look at how we can use git stash to save our changes temporarily.

2
00:00:06,000 --> 00:00:09,990
We saw we could put changes in there, and we saw how we could list them, and we saw

3
00:00:10,000 --> 00:00:11,990
how we could use show in order to inspect them.

4
00:00:12,000 --> 00:00:16,990
Now what we want to do is be able to retrieve those stash changes out of there, essentially

5
00:00:17,000 --> 00:00:19,990
do the opposite of git stash save.

6
00:00:20,000 --> 00:00:23,990
If we put them in the drawer before, now we want to get them back out of the drawer, and

7
00:00:24,000 --> 00:00:27,990
when we do that it's going to bring those changes back into our working directory,

8
00:00:28,000 --> 00:00:31,990
whatever that working directory is, whichever branch we're on. And now just as a refresher,

9
00:00:32,000 --> 00:00:40,990
remember when I did the stash before I was on the shorten_title branch, now I'm on the master branch.

10
00:00:41,000 --> 00:00:44,990
Git doesn't care. For all it knows this is absolutely what you intended, which is stash

11
00:00:45,000 --> 00:00:47,990
the changes, switch branches and then bring them out again.

12
00:00:48,000 --> 00:00:50,990
So it doesn't matter which branch you're on, it's going to try to bring them into your

13
00:00:51,000 --> 00:00:53,990
working directory and apply those changes.

14
00:00:54,000 --> 00:00:57,990
Like with merges, there's the possibility that there may be conflicts that those changes

15
00:00:58,000 --> 00:01:01,990
don't apply cleanly, and in that case it works like merge does.

16
00:01:02,000 --> 00:01:06,990
It does its best to try and figure out how to merge the changes, but if not, then there

17
00:01:07,000 --> 00:01:10,990
will be conflicts, and it'll be up to you to resolve those conflicts.

18
00:01:11,000 --> 00:01:15,990
Now there are two commands that we can use to pull items out of the stash.

19
00:01:16,000 --> 00:01:22,990
The first is going to be git stash pop and the other one is git stash apply, both of

20
00:01:23,000 --> 00:01:27,990
them will pull what's in the stash out, and put it in the working directory.

21
00:01:28,000 --> 00:01:33,990
The difference is that stash pop also removes it from the stash as well.

22
00:01:34,000 --> 00:01:40,990
Git stash apply leaves a copy there, so pop is going to pop it out so that it's no longer in there at all.

23
00:01:41,000 --> 00:01:45,990
We'd just popped it out of the drawer and back into our working directory.

24
00:01:46,000 --> 00:01:48,990
It is exactly the opposite of git stash save.

25
00:01:49,000 --> 00:01:53,990
Git stash apply pulls it from the stash into the working directory but leaves a copy in the stash.

26
00:01:54,000 --> 00:01:59,990
The idea here is that it might be some change that we want to apply to where we are now,

27
00:02:00,000 --> 00:02:03,990
then we might want to switch to a different branch and apply it there, switch to another

28
00:02:04,000 --> 00:02:04,990
branch and apply it there as well.

29
00:02:05,000 --> 00:02:09,990
So we want to keep it in the stash as we move between each of those branches.

30
00:02:10,000 --> 00:02:12,990
Or it might be something that we want to apply then make a few more commits and then apply

31
00:02:13,000 --> 00:02:14,990
it again, and so on.

32
00:02:15,000 --> 00:02:19,990
Most of the time, pop is what you're going to want to use, and that's what we're going to use here.

33
00:02:20,000 --> 00:02:25,990
After pop, I need to specify which stash item I want it to pull out.

34
00:02:26,000 --> 00:02:29,990
If we don't say then by default, it's going to pull the first one, which is this one.

35
00:02:30,000 --> 00:02:31,990
I'll just go ahead and write that in there.

36
00:02:32,000 --> 00:02:33,990
So if we don't say, it will pull the same thing.

37
00:02:34,000 --> 00:02:38,990
It'd be exactly the same as if we did stash @ sign, curly braces around a zero.

38
00:02:39,000 --> 00:02:43,990
If we had three of them, and we wanted to pop up the third one, well then we'd do git

39
00:02:44,000 --> 00:02:48,990
stash and then 2, 2 because the third one is actually number 2 because they start numbering

40
00:02:49,000 --> 00:02:52,990
at 0; 0, 1 and 2.

41
00:02:53,000 --> 00:02:54,990
But in this case, I want to pop out that first one.

42
00:02:55,000 --> 00:03:01,990
So I'll pop it out, auto-merging mission.html, changes not staged for commit, that means

43
00:03:02,000 --> 00:03:05,990
it's in my working directory, and it dropped the stash right here.

44
00:03:06,000 --> 00:03:10,990
So now if we say git stash list, you'll see that it's not in there anymore.

45
00:03:11,000 --> 00:03:17,990
And if we go and look at that file, mission, you'll see that it has the Our Mission in

46
00:03:18,000 --> 00:03:19,990
it, which is the change that we made.

47
00:03:20,000 --> 00:03:22,990
Now we can re-stash this change if we want.

48
00:03:23,000 --> 00:03:23,990
If we say, oops, wait!

49
00:03:24,000 --> 00:03:29,990
I didn't want to be on the mission branch, we can say git stash save, and then we can

50
00:03:30,000 --> 00:03:34,990
store "change to mission page title."

51
00:03:35,000 --> 00:03:42,990
Now it's saved again, git checkout, and we'll check out our shorten_title branch, okay.

52
00:03:43,000 --> 00:03:49,990
Git status, nothing in there, git stash, and this time just for the experience of it, let's

53
00:03:50,000 --> 00:03:55,990
do apply, and we won't specify which one, that will pull the top one out of there.

54
00:03:56,000 --> 00:03:57,990
Just take a list just so you see it, there it is.

55
00:03:58,000 --> 00:04:03,990
And let's this time do apply, now it still does the auto-merge but this time when we

56
00:04:04,000 --> 00:04:08,990
look at our stash, you can see that it's still there. It did not take it out of there.

57
00:04:09,000 --> 00:04:14,990
For now, you can just leave the changes we made to mission.html in your working directory.

58
00:04:15,000 --> 00:04:15,990
We're not going to commit it or worry about right now.

59
00:04:16,000 --> 00:04:20,990
What we want to focus on next is how we can delete items that are in the stash. In particular,

60
00:04:21,000 --> 00:04:23,990
I want to see how we can delete this item that we left in there.

61
00:04:24,000 --> 00:04:34,000


