1
00:00:00,000 --> 00:00:03,990
In the last movie we saw how we could use the .gitignore file to provide rules

2
00:00:04,000 --> 00:00:08,990
to Git about what files ought to be ignored or not tracked.

3
00:00:09,000 --> 00:00:12,990
In this movie I want to talk about to the kinds of files that you might want to

4
00:00:13,000 --> 00:00:16,990
include in your .gitignore file. First, let's look at some general categories.

5
00:00:17,000 --> 00:00:21,990
Compiled source code, the idea here is that you would want to store the

6
00:00:22,000 --> 00:00:27,990
uncompiled code but at the compilation you would actually want to do after you pull down the repository.

7
00:00:28,000 --> 00:00:31,990
The compiled code might depend on things like the processor that you're running

8
00:00:32,000 --> 00:00:35,990
on your computer at the time, so you'd want to compile it fresh so that you would

9
00:00:36,000 --> 00:00:36,990
make sure that it was compatible.

10
00:00:37,000 --> 00:00:41,990
You would also want to ignore packages and compressed files, so that's files that

11
00:00:42,000 --> 00:00:47,990
end in .zip, .gz, for example, it's also disk image files, those are typically

12
00:00:48,000 --> 00:00:49,990
files that you're not using in the project itself.

13
00:00:50,000 --> 00:00:53,990
For example, a zipped files is usually on its way somewhere else.

14
00:00:54,000 --> 00:00:57,990
You're zipping it up so that you can download it or send it to someone, it's not

15
00:00:58,000 --> 00:01:00,990
usable in itself, it has to be uncompressed before it's usable.

16
00:01:01,000 --> 00:01:03,990
And you don't gain any advantage by having a compressed, Git does its own

17
00:01:04,000 --> 00:01:07,990
compression, so you're not helping Git out by compressing those files.

18
00:01:08,000 --> 00:01:10,990
The third one would be logs and databases.

19
00:01:11,000 --> 00:01:14,990
The idea here is files that change often. So while we're working on our

20
00:01:15,000 --> 00:01:17,990
project, it's logging information to a log file. We don't want every time you

21
00:01:18,000 --> 00:01:21,990
hit get status, we don't want it to come up and tell us about those changes to the log file.

22
00:01:22,000 --> 00:01:26,990
And then operating system generated files, these are files that have nothing

23
00:01:27,000 --> 00:01:30,990
to do with our project, they are files that the operating system is using to keep track of things.

24
00:01:31,000 --> 00:01:35,990
Maybe it's the window position on the desktop, or maybe it's things that are in the trashcan.

25
00:01:36,000 --> 00:01:39,990
We want to ignore those, we don't want to have those tracked in our repository

26
00:01:40,000 --> 00:01:41,990
because they are really not about the project.

27
00:01:42,000 --> 00:01:45,990
And the last general category would be user-uploaded assets.

28
00:01:46,000 --> 00:01:49,990
Now this really applies mostly if you're talking about working with web projects.

29
00:01:50,000 --> 00:01:53,990
Let's imagine for a moment that we have a PHP project, and we have a web form

30
00:01:54,000 --> 00:01:55,990
where a user can upload an image.

31
00:01:56,000 --> 00:01:59,990
Well, as we're developing and we're testing our code, we might try uploading

32
00:02:00,000 --> 00:02:04,990
images, and we would tell our PHP code, hey, once you receive an image you have

33
00:02:05,000 --> 00:02:06,990
to store it in this directory inside the project.

34
00:02:07,000 --> 00:02:10,990
So it stores in that directory and then Git comes up and says, "Hey, I noticed

35
00:02:11,000 --> 00:02:13,990
there is a new image file, do you want to add it to the repository?"

36
00:02:14,000 --> 00:02:17,990
We don't, we want to ignore all those files, all the tests that we do,

37
00:02:18,000 --> 00:02:20,990
everything is uploaded in those image directory's user-uploaded content, we

38
00:02:21,000 --> 00:02:21,990
just want it to ignore.

39
00:02:22,000 --> 00:02:25,990
That is dynamic and changing in the same way the log files and databases are changing.

40
00:02:26,000 --> 00:02:29,990
Now those are some general categories, but I'd like to give you some more

41
00:02:30,000 --> 00:02:33,990
specific ideas as well, and there are some great resources for this on GitHub.

42
00:02:34,000 --> 00:02:37,990
So if you go on GitHub there's two URLs that you want to take a look at.

43
00:02:38,000 --> 00:02:41,990
The first is a help article just about ignoring files that has some good tips in it.

44
00:02:42,000 --> 00:02:46,990
And then the second is there is actually a github repository called gitignore

45
00:02:47,000 --> 00:02:47,990
which has some great ideas in there as well.

46
00:02:48,000 --> 00:02:49,990
Let's take a look at both of these.

47
00:02:50,000 --> 00:02:54,990
So the first of these is the github help article about ignoring files, and it

48
00:02:55,000 --> 00:02:57,990
has also some information just about ignoring files generally, including the

49
00:02:58,000 --> 00:02:58,990
things that we just learned about gitignore.

50
00:02:59,000 --> 00:03:03,990
But right here is what I want you to see: "Some good rules to add to this file

51
00:03:04,000 --> 00:03:07,990
are:" and you can see they've broken out Compiled source, Packages, Logs and

52
00:03:08,000 --> 00:03:08,990
databases, OS generated files.

53
00:03:09,000 --> 00:03:11,990
So it gives you a list of some good and general ideas.

54
00:03:12,000 --> 00:03:14,990
Now this is probably overkill for most people because you probably aren't going

55
00:03:15,000 --> 00:03:17,990
to come across even half of these depending on what language you are using.

56
00:03:18,000 --> 00:03:20,990
This is really a very general list.

57
00:03:21,000 --> 00:03:24,990
To give more specific and look at your specific purposes, the gitignore

58
00:03:25,000 --> 00:03:25,990
repository is a great place to look.

59
00:03:26,000 --> 00:03:30,990
If we scan down here, you'll see that there is a list of all the different files

60
00:03:31,000 --> 00:03:34,990
that are in here, these are files in the repository, and each one is a gitignore

61
00:03:35,000 --> 00:03:36,990
file that's specific to a certain language.

62
00:03:37,000 --> 00:03:41,990
So, for example, if you are working with Django, you can click on that, and you

63
00:03:42,000 --> 00:03:46,990
can see here is the list of files that it thinks would be a good idea to ignore.

64
00:03:47,000 --> 00:03:48,990
If we come over here, let's scroll down to another one.

65
00:03:49,000 --> 00:03:55,990
Let's say that we're working Java, well here's a Java.gitignore file.

66
00:03:56,000 --> 00:04:00,990
If we scroll down a little further here's one for Perl, let's click on that, and

67
00:04:01,000 --> 00:04:03,990
now we see the list of files that typically would come up that you would want to

68
00:04:04,000 --> 00:04:06,990
ignore if you are working on a Perl project.

69
00:04:07,000 --> 00:04:09,990
Now it's not just the languages of the applications that you might be using,

70
00:04:10,000 --> 00:04:13,990
there is also a folder here called Global, that has a lot of stuff about

71
00:04:14,000 --> 00:04:15,990
operating systems or applications that you might be using.

72
00:04:16,000 --> 00:04:22,990
So for example, if you are on OS X, here's a list of the files that are good to ignore for OS X.

73
00:04:23,000 --> 00:04:26,990
If you're on Windows, then you can scroll down here, and here's a list of the ones

74
00:04:27,000 --> 00:04:30,990
that are good to ignore on Windows.

75
00:04:31,000 --> 00:04:34,990
So it's a great resource for you to comb through and figure out the components

76
00:04:35,000 --> 00:04:36,990
that you might want to put in your gitignore file.

77
00:04:37,000 --> 00:04:40,990
Of course, the other simpler way to do it is just to start creating your project,

78
00:04:41,000 --> 00:04:44,990
and as files pop up that you want to ignore you can just take a second and add

79
00:04:45,000 --> 00:04:46,990
those to the gitignore file.

80
00:04:47,000 --> 00:04:57,000


