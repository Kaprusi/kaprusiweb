1
00:00:00,000 --> 00:00:03,990
I want to conclude our discussion of merging by giving you some strategies that you can

2
00:00:04,000 --> 00:00:08,990
use to try to take some of the pain out of merge conflicts, to reduce them and to make

3
00:00:09,000 --> 00:00:09,990
them easier to deal with.

4
00:00:10,000 --> 00:00:13,990
I think this is important, because handling merge conflicts is really the only part of

5
00:00:14,000 --> 00:00:15,990
working with branches that can be at all painful.

6
00:00:16,000 --> 00:00:18,990
The first tip is to keep lines short.

7
00:00:19,000 --> 00:00:22,990
In the example that we just did, we had three large paragraphs of text, so we've got our

8
00:00:23,000 --> 00:00:27,990
merge conflict, we didn't know for sure where the conflict was in those three blocks of text.

9
00:00:28,000 --> 00:00:31,990
But by keeping the line short will make it much easier to spot where the problems were,

10
00:00:32,000 --> 00:00:35,990
because Git would then be able to show us, ah, the error was actually in the first part

11
00:00:36,000 --> 00:00:39,990
of this very long paragraph, not just somewhere inside of this paragraph, so it makes them

12
00:00:40,000 --> 00:00:40,990
easier to deal with.

13
00:00:41,000 --> 00:00:45,990
And in some cases, it might allow Git to resolve some of those conflicts for you automatically

14
00:00:46,000 --> 00:00:47,990
and have less work for you to do.

15
00:00:48,000 --> 00:00:50,990
The second tip is to keep your commits small and focused.

16
00:00:51,000 --> 00:00:54,990
If you open up a document to make a change, just make that change and then commit it,

17
00:00:55,000 --> 00:00:59,990
don't go in there and let yourself start wandering around, making lots of other changes, sort

18
00:01:00,000 --> 00:01:03,990
of, while I'm in here changes. I might as well do these things while I'm in here, and

19
00:01:04,000 --> 00:01:05,990
then you commit it all together.

20
00:01:06,000 --> 00:01:08,990
You're more likely to create merge conflicts for yourself by doing that.

21
00:01:09,000 --> 00:01:14,990
Especially, be careful about stray edits to whitespace, that is spaces, tabs, and line returns.

22
00:01:15,000 --> 00:01:17,990
Now sometimes you're going to want to make edits to those, I'm not saying that, what

23
00:01:18,000 --> 00:01:22,990
I'm saying is don't make unnecessary edits to those, or unintentional edits.

24
00:01:23,000 --> 00:01:27,990
You will get a merge conflict if you change four spaces into eight spaces, and you'll

25
00:01:28,000 --> 00:01:32,990
have to stop and resolve it, but if you don't unnecessarily change whitespace, then those

26
00:01:33,000 --> 00:01:33,990
conflicts won't come up.

27
00:01:34,000 --> 00:01:37,990
The next one may or may not be practical, which is to merge often.

28
00:01:38,000 --> 00:01:42,990
If you can, if you're not waiting until you finish a feature, get to some future point

29
00:01:43,000 --> 00:01:48,990
in a project, if you can merge in often back to your master branch, then you should do it.

30
00:01:49,000 --> 00:01:51,990
Because then each time you do it these merges are going to be smaller and the conflicts

31
00:01:52,000 --> 00:01:53,990
will be smaller and more isolated.

32
00:01:54,000 --> 00:01:57,990
The longer you wait, the bigger the merge conflicts are going to be. Instead of having

33
00:01:58,000 --> 00:02:01,990
a conflict in three files, suddenly you're going to have a conflict in 50 files.

34
00:02:02,000 --> 00:02:04,990
And you're going to spend a lot of time resolving it, and it's going to be much more painful

35
00:02:05,000 --> 00:02:08,990
experience than if you break that up and resolve those conflicts as you go.

36
00:02:09,000 --> 00:02:12,990
Now I don't want it to be a surprise to you that you can't merge more than once, we've

37
00:02:13,000 --> 00:02:13,990
only merged one time.

38
00:02:14,000 --> 00:02:16,990
Let's just take a quick look to make sure that that's clear.

39
00:02:17,000 --> 00:02:18,990
If you have your master branch, let's say, and we've our text_edits branch.

40
00:02:19,000 --> 00:02:23,990
So we're making commits to both of those, we're merging back in.

41
00:02:24,000 --> 00:02:26,990
Now we don't have to throw away our text_edits branch at this point.

42
00:02:27,000 --> 00:02:30,990
We can still continue to make new commits into the text_edits branch, and new commits

43
00:02:31,000 --> 00:02:33,990
to the master branch and then merge those commits back in.

44
00:02:34,000 --> 00:02:37,990
We can make more edits in to our text_edits branch, more commits in the master branch

45
00:02:38,000 --> 00:02:42,990
and then merge those back in, so this is what I mean by merging often.

46
00:02:43,000 --> 00:02:47,990
The last strategy is perhaps the most important one of all, which is that you can track changes

47
00:02:48,000 --> 00:02:49,990
to master as you go.

48
00:02:50,000 --> 00:02:53,990
What do I mean by track changes? I mean as changes continue to happen in master, keep

49
00:02:54,000 --> 00:02:58,990
bringing those changes into your branch so that your branch stays mostly in sync with

50
00:02:59,000 --> 00:03:00,990
master, it doesn't get far out of sync.

51
00:03:01,000 --> 00:03:02,990
Let me give in illustration of this.

52
00:03:03,000 --> 00:03:07,990
So again, we have our master branch, we have our text_ edits branch, we're making commits to both of those.

53
00:03:08,000 --> 00:03:11,990
So at a certain point though we say you know what, master has had some critical changes

54
00:03:12,000 --> 00:03:14,990
in it that I'd really like to have in my text_edits branch.

55
00:03:15,000 --> 00:03:17,990
I can merge those into the text_edits branch.

56
00:03:18,000 --> 00:03:21,990
Now my text_edits branch is mostly in sync with master again, and then I'll have more

57
00:03:22,000 --> 00:03:27,990
changes to master, more changes to text_edits, and then I can merge those changes back in

58
00:03:28,000 --> 00:03:31,990
again, tracking what's going on in master all along so that I don't get too far out of sync.

59
00:03:32,000 --> 00:03:35,990
And then that way when I finally decide that I want to merge text_edits back into master,

60
00:03:36,000 --> 00:03:37,990
it's not that far away anymore.

61
00:03:38,000 --> 00:03:41,990
It has most of the changes incorporated in master already, and we'll reduce the number

62
00:03:42,000 --> 00:03:43,990
of conflicts that you get when you merge back in.

63
00:03:44,000 --> 00:03:47,990
We call this process tracking, and it is an important strategy to use.

64
00:03:48,000 --> 00:03:50,990
By now you should have a good sense of how to work with branches.

65
00:03:51,000 --> 00:03:55,990
How to create them, how to add commits to them, how to switch between different branches,

66
00:03:56,000 --> 00:03:58,990
and how to merge them back in. It's a very powerful feature of Git, and you're going

67
00:03:59,000 --> 00:04:00,990
to find that you use it a lot.

68
00:04:01,000 --> 00:04:11,000


