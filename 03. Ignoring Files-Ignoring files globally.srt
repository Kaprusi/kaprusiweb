1
00:00:00,000 --> 00:00:03,990
We've seen how we can tell Git which files that auto ignore inside of our

2
00:00:04,000 --> 00:00:07,990
working directory, and we did that by putting a gitignore file in the root of

3
00:00:08,000 --> 00:00:11,990
our working directory and even storing and committing that to our repository.

4
00:00:12,000 --> 00:00:15,990
But what if we find ourselves ignoring the same files over and over and all of

5
00:00:16,000 --> 00:00:19,990
our different projects in each of our different Git repositories?

6
00:00:20,000 --> 00:00:23,990
Or as we saw in the last movie some of the files that we want to ignore are

7
00:00:24,000 --> 00:00:26,990
operating specific files, we want to ignore them all the time, because they are

8
00:00:27,000 --> 00:00:29,990
just generally the kind of thing that we don't want to track.

9
00:00:30,000 --> 00:00:34,990
Well, to do this, we're going to configure Git to globally ignore some files.

10
00:00:35,000 --> 00:00:39,990
That means if we ignore those files in all repositories, not just in any one specific

11
00:00:40,000 --> 00:00:44,990
repository, and the settings for this global ignore are not going to be inside

12
00:00:45,000 --> 00:00:47,990
the repository, they're going to live outside of it, right?

13
00:00:48,000 --> 00:00:52,990
It's part of our git configuration, not our project configuration, but our git configuration.

14
00:00:53,000 --> 00:00:57,990
So what that means is it's not going to be stored in the repository. People who

15
00:00:58,000 --> 00:01:00,990
use our repositories, if someone downloads it and starts working with it, they're

16
00:01:01,000 --> 00:01:06,990
not going to get it, and so we've traded repository specific ignores for user

17
00:01:07,000 --> 00:01:10,990
specific ignores. They exist only on my machine. Now that's good because it

18
00:01:11,000 --> 00:01:14,990
means that I can configure exactly the way I like it, I can ignore the files

19
00:01:15,000 --> 00:01:18,990
that I want to ignore, and then we don't have to worry about what someone else

20
00:01:19,000 --> 00:01:20,990
wants to ignore, okay? I can just ignore my preferences.

21
00:01:21,000 --> 00:01:24,990
Now that can be good, for example, if I'm working on a Mac and someone

22
00:01:25,000 --> 00:01:27,990
else using their repository is working on Windows, then we can each have

23
00:01:28,000 --> 00:01:30,990
our own gitignore files that are specific to our operating system.

24
00:01:31,000 --> 00:01:31,990
We don't have to share those.

25
00:01:32,000 --> 00:01:36,990
But on the other hand, if I've told it to ignore all log files, files ending

26
00:01:37,000 --> 00:01:41,990
in .log, and that's in my global config but not the project config, and then

27
00:01:42,000 --> 00:01:45,990
someone else starts using the repository, then they're going to always be

28
00:01:46,000 --> 00:01:51,990
prompted by Git to try and track the log file, that is unless they also ignore the log file.

29
00:01:52,000 --> 00:01:54,990
You just want to keep in mind the difference and consider whether you want an

30
00:01:55,000 --> 00:01:58,990
ignored file to be listed in your user-specific ignores or your

31
00:01:59,000 --> 00:02:02,990
repository-specific ignores. Okay, so how to actually do the ignoring?

32
00:02:03,000 --> 00:02:06,990
Well, we do that using git config. We saw this back when we were setting up

33
00:02:07,000 --> 00:02:07,990
Git at the beginning.

34
00:02:08,000 --> 00:02:13,990
We do git config with the global option and then core.excludesfile, and we tell

35
00:02:14,000 --> 00:02:15,990
it where the file is.

36
00:02:16,000 --> 00:02:19,990
So the file can be named anything we want, we can locate it wherever we want, we

37
00:02:20,000 --> 00:02:23,990
just have to tell Git in its config file, hey, this is the file you should use

38
00:02:24,000 --> 00:02:28,990
for globally ignoring things. Let's try creating one.

39
00:02:29,000 --> 00:02:32,990
So right now I'm inside my explore_ california directory, where I'm going to put

40
00:02:33,000 --> 00:02:37,990
my global ignore is in my user directory, right here. That's where my git config

41
00:02:38,000 --> 00:02:44,990
was before, if you remember ls -la and inside Users/kevinskoglund, you'll see

42
00:02:45,000 --> 00:02:46,990
that's where I've got my global gitconfig file.

43
00:02:47,000 --> 00:02:49,990
So I'm going to put the gitignore file right alongside it.

44
00:02:50,000 --> 00:02:53,990
You can create a number of different ways, you can use a Text Editor.

45
00:02:54,000 --> 00:02:57,990
I'm going to use the nano Text Editor that's in Mac OS X and in Unix--it's just

46
00:02:58,000 --> 00:03:01,990
a real simple Text Editor--and tell it that it ought to go to Users/kevinskoglund

47
00:03:02,000 --> 00:03:06,990
and create a file called .gitignore_global.

48
00:03:07,000 --> 00:03:10,990
Now again, you can call it anything you want, so we'll be just call it gitignore.

49
00:03:11,000 --> 00:03:14,990
I'm going to call it gitignore_global, so it is very clear that it's a global file.

50
00:03:15,000 --> 00:03:18,990
So inside that file then we can put whatever things we want to ignore.

51
00:03:19,000 --> 00:03:23,990
Because I'm on a Mac, the things that I want to ignore most often are .DS_Store

52
00:03:24,000 --> 00:03:32,990
and .Trashes and .Spotlight-V100, those are just a couple of things that often

53
00:03:33,000 --> 00:03:36,990
pop up that need to get ignored, and there are files that the operating system is

54
00:03:37,000 --> 00:03:38,990
using to keep track of various things.

55
00:03:39,000 --> 00:03:42,990
So I'm just going to go ahead and close that now, say yes, and let's save it to

56
00:03:43,000 --> 00:03:44,990
that file name that I gave it.

57
00:03:45,000 --> 00:03:49,990
And now if we check again la / Users/kevinskoglund, there we are.

58
00:03:50,000 --> 00:03:54,990
Now you can see that that file is there, and then the last thing I need to do is

59
00:03:55,000 --> 00:04:03,990
tell git config about that file, so git config --global core.excludesfile and

60
00:04:04,000 --> 00:04:07,990
then the path to the file. Let me just clear the screen, so it's clear.

61
00:04:08,000 --> 00:04:11,990
The short version in Unix, it just uses this Tilde that represents your user

62
00:04:12,000 --> 00:04:18,990
directory so you could say ~/.gitignore _global, that's what I would probably

63
00:04:19,000 --> 00:04:22,990
do, but you can also do it with a full path, which is what you would do on

64
00:04:23,000 --> 00:04:26,990
Windows, and we'll put in the full thing, kevingskoglund, that's the full path to get there.

65
00:04:27,000 --> 00:04:29,990
So when we hit Return it'll add to our config file.

66
00:04:30,000 --> 00:04:38,990
If we take a look at that config file cat /Users/kevinskoglund/.gitconfig, we

67
00:04:39,000 --> 00:04:41,990
can say that it added that excludes file right here.

68
00:04:42,000 --> 00:04:45,990
So, now that's the file that we'll be using for global gitignores, so I'll

69
00:04:46,000 --> 00:04:48,990
ignore those files in every repository on my machine.

70
00:04:49,000 --> 00:04:59,000


