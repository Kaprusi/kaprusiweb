1
00:00:00,000 --> 00:00:03,990
In this movie, we are going to learn how to tell Git to ignore tracked

2
00:00:04,000 --> 00:00:07,990
files, that is files that has already started tracking, we want to ignore

3
00:00:08,000 --> 00:00:08,990
them after the fact.

4
00:00:09,000 --> 00:00:14,990
When we were looking gitignore previously, we were looking mainly at ignoring new files.

5
00:00:15,000 --> 00:00:19,990
So a new file is out of the repo, we don't want to track it, so we tell Git that

6
00:00:20,000 --> 00:00:22,990
it ought to ignore it rather than continue to show it to us.

7
00:00:23,000 --> 00:00:25,990
But you should note that Git will not ignore a file that was already

8
00:00:26,000 --> 00:00:31,990
tracked before a rule was added to the gitignore file, telling it that it ought to ignore it.

9
00:00:32,000 --> 00:00:35,990
If that's the case Git will still try to keep track of the file and the file

10
00:00:36,000 --> 00:00:38,990
must first be untracked. Let me show you what I mean.

11
00:00:39,000 --> 00:00:43,990
Let's say that I have a new file here, tempfile2.txt, I'm going to drop this

12
00:00:44,000 --> 00:00:49,990
into my working directory. If I now do git status, you will see that it comes up

13
00:00:50,000 --> 00:00:52,990
and tells me that now this new file has been added.

14
00:00:53,000 --> 00:00:58,990
Now before we do a gitignore rule for it, what we want to do is commit it to our repository.

15
00:00:59,000 --> 00:01:07,990
So let's do git add tempfile2 and then git commit with the message, "Adding

16
00:01:08,000 --> 00:01:12,990
tempfile2.txt to repo before ignoring it".

17
00:01:13,000 --> 00:01:18,990
Okay, so it's now been added to our repository, git status, the working directory

18
00:01:19,000 --> 00:01:22,990
is clean, and we look and here is the file.

19
00:01:23,000 --> 00:01:25,990
So we've just committed a file. That's all we have done, just a basic commit.

20
00:01:26,000 --> 00:01:29,990
Now that Git is tracking the file, let's tell it that we wanted to ignore

21
00:01:30,000 --> 00:01:31,990
changes to this file in the future.

22
00:01:32,000 --> 00:01:34,990
So let's open up our gitignore, so if you remember that's right here in the root

23
00:01:35,000 --> 00:01:36,990
of the project directory.

24
00:01:37,000 --> 00:01:39,990
We can open this file up and edit in a number of ways, because it has the dot

25
00:01:40,000 --> 00:01:43,990
in front of it, it's not visible here from this window, which makes it a little bit tricky.

26
00:01:44,000 --> 00:01:48,990
So I am going to use the Command Line, and I am going to use nano which is a

27
00:01:49,000 --> 00:01:52,990
Unix program, that will let me edit, gitignore and just right here below

28
00:01:53,000 --> 00:01:56,990
tempfile.txt let's add a new line tempfile2.txt.

29
00:01:57,000 --> 00:02:03,990
Ctrl+X to Exit, Y for Yes to save changes and Return to keep the file name.

30
00:02:04,000 --> 00:02:08,990
So now it's been told that it ought to ignore it, and of course gitignore shows

31
00:02:09,000 --> 00:02:12,990
up now on our status list is something that has edits that needs to be

32
00:02:13,000 --> 00:02:14,990
committed to the repository. Let's not do that just yet.

33
00:02:15,000 --> 00:02:17,990
Instead let's go over here to tempfile2, and let's make an edit.

34
00:02:18,000 --> 00:02:21,990
This is the second temporary file.

35
00:02:22,000 --> 00:02:26,990
If we come here, say git status, notice that even though we told it to ignore

36
00:02:27,000 --> 00:02:31,990
it, it did not ignore our changes, it's still kept track of our changes, because

37
00:02:32,000 --> 00:02:34,990
it's a tracked file, so it still sees it.

38
00:02:35,000 --> 00:02:38,990
And it doesn't matter if we were to have committed gitignore to the repository

39
00:02:39,000 --> 00:02:42,990
first or not, that's not why it's doing this, it's because Git still keeps track

40
00:02:43,000 --> 00:02:44,990
of these tracked files.

41
00:02:45,000 --> 00:02:48,990
Instead, what we have to do is tell Git to stop tracking it.

42
00:02:49,000 --> 00:02:51,990
One way we could do that is just to remove it, right?

43
00:02:52,000 --> 00:02:55,990
Git remove that would do it, git remove tempfile2.txt.

44
00:02:56,000 --> 00:03:01,990
It would remove it from the repository, and it would remove our version, it would do both.

45
00:03:02,000 --> 00:03:05,990
What if we didn't want to remove our version? What if this was a log file?

46
00:03:06,000 --> 00:03:09,990
Of what if it's a set of images or something or Photoshop files that we want, and

47
00:03:10,000 --> 00:03:14,990
we want to keep on ours but we want to tell it, you know what, stop tracking it?

48
00:03:15,000 --> 00:03:19,990
We may even want to leave it in the repository so that it stays in the repository

49
00:03:20,000 --> 00:03:20,990
for other people to download.

50
00:03:21,000 --> 00:03:24,990
We just want to ignore changes that happened to it after that, right?

51
00:03:25,000 --> 00:03:28,990
That certainly might be the case with like a log file or something. We want to have a

52
00:03:29,000 --> 00:03:31,990
placeholder for the log file that everyone can have, but we don't necessarily

53
00:03:32,000 --> 00:03:34,990
want to have changes to that log file be tracked.

54
00:03:35,000 --> 00:03:41,990
Well, what we want to do here instead of just remove is a remove with the cached option.

55
00:03:42,000 --> 00:03:50,990
So --cached, that's going to tell it to remove this file from the staging index,

56
00:03:51,000 --> 00:03:54,990
not from the repository, just from the staging index.

57
00:03:55,000 --> 00:03:56,990
That will cause the file to stop being tracked.

58
00:03:57,000 --> 00:04:00,990
It will still leave the copy in the repo, it will still leave the copy in

59
00:04:01,000 --> 00:04:04,990
my working directory. It's just going to take it out of the index.

60
00:04:05,000 --> 00:04:09,990
So let's go ahead and hit Return, it will say that it removed it, I do git

61
00:04:10,000 --> 00:04:13,990
status now, you will see it comes up and says that it was deleted, that's the

62
00:04:14,000 --> 00:04:17,990
commit that it wants to make is to delete the file.

63
00:04:18,000 --> 00:04:20,990
However, if I come back over here, you will see that the file is still here,

64
00:04:21,000 --> 00:04:22,990
it has not deleted it.

65
00:04:23,000 --> 00:04:27,990
So let's go ahead and add our gitignore file, so now both of those are ready to

66
00:04:28,000 --> 00:04:29,990
go, here they are, ready to be committed.

67
00:04:30,000 --> 00:04:40,990
And let's git commit -m, and we are going to say, "Remove tempfile2.txt from

68
00:04:41,000 --> 00:04:45,990
staging index" and then hit Return.

69
00:04:46,000 --> 00:04:51,990
Now if we do git status, we will see that the working directory is clean, but it

70
00:04:52,000 --> 00:04:54,990
is still listed here in my directory. It did not get rid of it.

71
00:04:55,000 --> 00:05:01,990
We make more changes to it, let's open it up, let's say These changes will

72
00:05:02,000 --> 00:05:05,990
not be tracked anymore.

73
00:05:06,000 --> 00:05:12,990
Save it, close it up, git status, and now it's not being tracked anymore.

74
00:05:13,000 --> 00:05:15,990
So if you want Git to ignore files that are already being tracked, but you

75
00:05:16,000 --> 00:05:19,990
don't want to remove them completely, then what you need to do is not only

76
00:05:20,000 --> 00:05:25,990
ignore it, but tell Git that it ought to also remove them from the staging index or the cache.

77
00:05:26,000 --> 00:05:36,000


